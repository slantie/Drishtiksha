// =============================================================================
// Drishtiksha: Deepfake Detection Service - Database Schema
// =============================================================================
//
// This schema supports the comprehensive multi-model deepfake detection system
// with integration to the enhanced FastAPI ML Server featuring:
//
// ü§ñ SUPPORTED MODELS:
// - SIGLIP-LSTM V1: Fast, balanced performance for real-time applications  
// - SIGLIP-LSTM V3: Enhanced accuracy with advanced temporal features
// - ColorCues LSTM: Specialized color-based deepfake detection
//
// üìã ANALYSIS ENDPOINTS:
// - QUICK: /analyze - Fast prediction with basic confidence score
// - DETAILED: /analyze/detailed - Comprehensive analysis with detailed metrics
// - FRAMES: /analyze/frames - Frame-by-frame analysis with temporal patterns  
// - VISUALIZE: /analyze/visualize - Visual analysis with overlays
//
// üèóÔ∏è SCHEMA STRUCTURE:
// - DeepfakeAnalysis: Core analysis record with relationships to detailed data
// - AnalysisDetails: Comprehensive metrics (avg confidence, temporal consistency)
// - FrameAnalysis: Per-frame detection results for timeline analysis
// - TemporalAnalysis: Pattern detection and anomaly identification
// - ModelInfo: Model version, architecture, and device information
// - SystemInfo: GPU memory, processing device, load balancing metrics
// - AnalysisError: Comprehensive error tracking with troubleshooting suggestions
//
// üîó INTEGRATION GUIDE:
// Refer to Server/README.md for complete Backend-Server integration patterns
// =============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  bio       String?
  phone     String?
  avatar    String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
  videos        Video[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model Video {
  id            String      @id @default(uuid())
  filename      String
  url           String
  visualizedUrl String? // Legacy: General visualized analysis URL (deprecated in favor of per-analysis URLs)
  publicId      String
  mimetype      String
  size          Int
  description   String?
  status        VideoStatus @default(UPLOADED)
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  analyses DeepfakeAnalysis[]

  @@map("videos")
}

model DeepfakeAnalysis {
  id             String         @id @default(uuid())
  videoId        String
  video          Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)
  prediction     PredictionType
  confidence     Float
  processingTime Float? // in seconds
  model          String
  modelVersion   String?
  analysisType   AnalysisType   @default(QUICK)
  status         AnalysisStatus @default(PENDING)
  errorMessage   String?
  timestamp      DateTime?
  visualizedUrl  String? // URL for model-specific visualized analysis output (/analyze/visualize endpoint)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Enhanced analysis data relationships
  analysisDetails  AnalysisDetails?
  frameAnalysis    FrameAnalysis[]
  temporalAnalysis TemporalAnalysis?
  modelInfo        ModelInfo?
  systemInfo       SystemInfo?
  errors           AnalysisError[] // Track analysis errors and retry attempts

  @@index([videoId, model, analysisType])
  @@map("deepfake_analyses")
}

model AnalysisDetails {
  id                  String           @id @default(uuid())
  analysisId          String           @unique
  analysis            DeepfakeAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  frameCount          Int
  avgConfidence       Float
  confidenceStd       Float
  temporalConsistency Float?
  rollingAverage      Float?
  createdAt           DateTime         @default(now())

  @@map("analysis_details")
}

model FrameAnalysis {
  id          String           @id @default(uuid())
  analysisId  String
  analysis    DeepfakeAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  frameNumber Int
  confidence  Float
  prediction  PredictionType
  timestamp   Float? // Frame timestamp in video
  createdAt   DateTime         @default(now())

  @@unique([analysisId, frameNumber], name: "analysis_frame_unique")
  @@map("frame_analysis")
}

model TemporalAnalysis {
  id               String           @id @default(uuid())
  analysisId       String           @unique
  analysis         DeepfakeAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  consistencyScore Float
  patternDetection String?
  anomalyFrames    Int[] // Array of frame numbers with anomalies
  confidenceTrend  String?
  totalFrames      Int
  fakeFrames       Int
  realFrames       Int
  avgConfidence    Float
  createdAt        DateTime         @default(now())

  @@map("temporal_analysis")
}

model ModelInfo {
  id           String           @id @default(uuid())
  analysisId   String           @unique
  analysis     DeepfakeAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  modelName    String // e.g., "SIGLIP-LSTM-V3"
  version      String // Model version string
  architecture String // Model architecture details
  device       String // Processing device (cuda:0, cpu, etc.)
  batchSize    Int? // Batch size used
  numFrames    Int? // Number of frames processed
  modelSize    String? // Model size information
  loadTime     Float? // Time taken to load model (ms)
  memoryUsage  String? // Memory usage during processing
  createdAt    DateTime         @default(now())

  @@map("model_info")
}

model SystemInfo {
  id                String           @id @default(uuid())
  analysisId        String           @unique
  analysis          DeepfakeAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  gpuMemoryUsed     String? // GPU memory usage during analysis
  gpuMemoryTotal    String? // Total GPU memory available
  processingDevice  String? // Device used for processing
  cudaAvailable     Boolean? // CUDA availability status
  cudaVersion       String? // CUDA version if available
  systemMemoryUsed  String? // System RAM usage
  systemMemoryTotal String? // Total system RAM
  cpuUsage          Float? // CPU usage percentage during analysis
  loadBalancingInfo Json? // Load balancing metrics as JSON
  serverVersion     String? // ML server version
  pythonVersion     String? // Python runtime version
  torchVersion      String? // PyTorch version
  requestId         String? // Unique request identifier for tracking
  createdAt         DateTime         @default(now())

  @@map("system_info")
}

model AnalysisError {
  id              String           @id @default(uuid())
  analysisId      String
  analysis        DeepfakeAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  errorType       String // "Model not found", "CUDA error", etc.
  errorMessage    String
  availableModels String[] // Available models at time of error
  suggestions     String[] // Troubleshooting suggestions
  stackTrace      String? // Technical stack trace for debugging
  serverResponse  Json? // Full server error response
  retryAttempt    Int              @default(0)
  createdAt       DateTime         @default(now())

  @@map("analysis_errors")
}

model ServerHealth {
  id                String       @id @default(uuid())
  serverUrl         String // ML Server URL
  status            ServerStatus @default(UNKNOWN)
  availableModels   String[] // Models currently loaded and available
  modelStates       Json? // Detailed model state information
  loadMetrics       Json? // Current load balancing and performance metrics
  gpuInfo           Json? // GPU availability, memory, utilization info
  systemResources   Json? // System resource information
  lastHealthCheck   DateTime // When this health check was performed
  responseTime      Float? // Health check response time in ms
  errorMessage      String? // Any error messages from health check
  requestCount      Int? // Number of requests processed since last check
  avgProcessingTime Float? // Average processing time for recent requests
  uptime            String? // Server uptime information
  version           String? // Server software version
  createdAt         DateTime     @default(now())

  @@map("server_health")
}

enum Role {
  USER
  ADMIN
  MODATOR
}

enum VideoStatus {
  UPLOADED
  QUEUED
  PROCESSING
  ANALYZED
  PARTIALLY_ANALYZED
  FAILED
}

enum PredictionType {
  REAL
  FAKE
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AnalysisType {
  QUICK // Basic analysis - /analyze endpoint
  DETAILED // Comprehensive analysis - /analyze/detailed endpoint  
  FRAMES // Frame-by-frame analysis - /analyze/frames endpoint
  VISUALIZE // Visual analysis with overlays - /analyze/visualize endpoint
  COMPREHENSIVE // Complete analysis with all features - /analyze/comprehensive endpoint
}

enum ServerStatus {
  HEALTHY // Server responding and models loaded
  DEGRADED // Server responding but some models unavailable
  UNHEALTHY // Server not responding or major issues
  MAINTENANCE // Server in maintenance mode
  UNKNOWN // Status not yet determined
}
