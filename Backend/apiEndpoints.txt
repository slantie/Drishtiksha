API Endpoints Documentation

This file lists all the available API endpoints for the application.

Version Prefix: /api/v1

Health Check (/health)
GET /
Description: Checks the health status of the backend service, database connection, and LSTM model service.
Response: { "success": true, "status": "OK", "timestamp": "...", "database": "Connected", "environment": "development", "modelService": { ... } }

Authentication (/auth)
All routes in this module are prefixed with /api/v1/auth.

Public Routes
These endpoints do not require an authentication token.

POST /signup
Description: Registers a new user.
Body: { "email", "password", "firstName", "lastName" }
Response: { "user": { ... }, "token": "..." }

POST /login
Description: Authenticates a user and returns a JWT.
Body: { "email", "password" }
Response: { "user": { ... }, "token": "..." }

POST /logout
Description: A placeholder for client-side token deletion.
Response: { "message": "Logout successful" }

Protected Auth Routes
These endpoints require a valid Bearer token in the Authorization header.

GET /profile
Description: Retrieves the profile of the currently authenticated user.
Response: { "user": { ... } }

PUT /profile
Description: Updates the profile information of the currently authenticated user.
Body: { "firstName"?, "lastName"?, "bio"?, "phone"? }
Response: { "user": { ... } }

PUT /profile/password
Description: Updates the password for the currently authenticated user.
Body: { "currentPassword", "newPassword", "confirmPassword" }
Response: { "user": { ... } }

PUT /profile/avatar
Description: Updates the avatar URL for the currently authenticated user.
Body: { "avatar": "https://url.to/image.png" }
Response: { "user": { ... } }

DELETE /profile/avatar
Description: Removes the avatar URL for the currently authenticated user.
Response: { "user": { ... } }

Video Management (/videos)
All routes in this module are prefixed with /api/v1/videos and are protected. They require a valid Bearer token.

POST /
Description: Uploads a new video for processing. The request must be multipart/form-data.
Form Fields: video (the video file), description (optional text).
Response: { "video": { ... } }

GET /
Description: Retrieves a list of all videos for the authenticated user (or all videos if the user is an ADMIN).
Response: [{ "video": { ... } }, ...]

GET /model/status
Description: Retrieves the status of the LSTM model analysis service.
Response: { "isConfigured": true, "health": { ... }, "modelInfo": { ... } }

GET /:id
Description: Retrieves a single video by its unique ID, including its analysis results.
Params: id (the video's UUID).
Response: { "video": { ... } }

PATCH /:id
Description: Updates a video's details, such as its filename or description.
Params: id (the video's UUID).
Body: { "description"?, "filename"? }
Response: { "video": { ... } }

DELETE /:id
Description: Deletes a video from the database and from Cloudinary.
Params: id (the video's UUID).
Response: { "message": "Video deleted successfully" }

Model Integration
The backend now integrates with an LSTM-based deepfake detection model server. The integration includes:

1. Real-time model analysis for uploaded videos
2. Fallback to mock data if the model service is unavailable
3. Health monitoring of the model service
4. Automatic file handling (download from Cloudinary if needed)
5. Comprehensive error handling and logging

Configuration:
- SERVER_URL: URL of the LSTM model server (default: http://localhost:8000)
- SERVER_API_KEY: API key for authentication with the model server

The LSTM model results are stored alongside existing mock analyses with the model identifier "LSTM_SIGLIP".